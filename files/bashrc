# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[00;36m\]\w$(__git_ps1 ":\[\033[00;32m\]%s ")\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Detect and load bash-completion
if [ -f /usr/local/etc/bash_completion ]; then
  source /usr/local/etc/bash_completion
  HAS_BASH_COMPLETION=1
elif [ -f /etc/bash_completion ]; then
  source /etc/bash_completion
  HAS_BASH_COMPLETION=1
fi

# We could use `brew --prefix git` to find the prefix to this path but it takes 500ms
source /usr/local/opt/git/etc/bash_completion.d/git-completion.bash
source /usr/local/opt/git/etc/bash_completion.d/git-prompt.sh

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -G --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias ll='ls -alFs'
alias la='ls -CFA'
alias l='ls -CF'

alias ..='cd ..'
alias russian_roulette="[[ $RANDOM -gt 20000 ]] && sudo rm -rf /"
alias edit_each='while read -r line; do $EDITOR "$line"; done'
alias lock='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'

alias g='git'
complete -o bashdefault -o default -o nospace -F _git g

function cdl() {
    builtin cd "$1"
    ls -lastp | grep -v \\.pyc$ | grep -v "\\./$" | grep -v " \\." | head -n15
    echo "..."
}


function bash_complete {
  [ "$HAS_BASH_COMPLETION" = 1 ] && complete "$@"
}

# Host completion for mosh
if which -s mosh; then
  _mosh() {
      _get_comp_words_by_ref -n : cur prev
    _known_hosts_real -a "$cur"
  }
  shopt -u hostcomplete && bash_complete -F _mosh mosh
fi

# FASD is fancier but was slowing down every new prompt
. /usr/local/etc/profile.d/z.sh

# By Evan Broder:
# You'll probably also want the following alias for pry so that you
# can still run it even in repositories that don't include pry in their Gemfile:

pry() {
    local gemfile
    if gemfile="$(_find_gemfile)"; then
        if grep -q pry "${gemfile}.lock"; then
            command bundle exec pry "$@"
        else
            command pry -rbundler/setup "$@"
        fi
    else
        command pry "$@"
    fi
}

stripe-pry() {
  if [[ "$1" == p* ]] || [[ "$1" == -p* ]] || [[ "$1" == --p* ]]; then
      PREFIX=""
      ECHO='"\e[31m\e[1mWARNING PRODUCTION MACHINE\n`hostname`\n\e[0m"'
  else
      PREFIX="qa-"
      ECHO='"\e[35m\e[1m`hostname`\n\e[0m"'
  fi
  ssh -t "$PREFIX"login1.nw "echo -e $ECHO && bash -ilc stripe-pry"
}

export PATH
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
export EDITOR='code --wait'
export VBOX_USER_HOME=~/.VirtualBox

export JAVA_HOME=$(/usr/libexec/java_home)

add_to_path () {
    [ -d "$1" ] && export PATH="$PATH:$1"
}
prepend_to_path () {
    [ -d "$1" ] && export PATH="$1:$PATH"
}


prepend_to_path /usr/local/bin
prepend_to_path /usr/local/sbin
prepend_to_path $HOME/code/env-conf/files/bin
add_to_path ./node_modules/.bin
add_to_path $HOME/code/go/bin

add_to_path /usr/local/hadoop/bin
add_to_path ~/stripe/hdfsync/bin

add_to_path ~/stripe/henson/bin
add_to_path ~/stripe/password-vault/bin
add_to_path ~/stripe/space-commander/bin

add_to_path ~/code/android/sdk/platform-tools

add_to_path ~/Library/Python/3.6/bin/

prepend_to_path /usr/local/opt/gnu-sed/libexec/gnubin
prepend_to_path /usr/local/opt/gnu-tar/libexec/gnubin
prepend_to_path /usr/local/opt/grep/libexec/gnubin

export GOPATH=$HOME/code/go
export ANDROID_HOME=/usr/local/opt/android-sdk

source ~/.rbenvrc
# This takes a few hundred milliseconds and I don't use virtualenv enough to justify it today
# source /usr/local/bin/virtualenvwrapper.sh

# add password-vault bash completion
[ -e ~/stripe/password-vault/bash_completion ] \
        && . ~/stripe/password-vault/bash_completion

if [ -f "$HOME/.bashrc-local" ]; then
   . "$HOME/.bashrc-local"
fi
# BEGIN STRIPE NODE CONFIG
#      To undo the following behavior, comment it out, dont delete it;
#      'pay-server/scripts/frontend/install_node_modules' will just add it again.
#      Ask in #frontend-infra or #iteng if you have questions.
export PATH="node_modules/.bin:$PATH"
# END STRIPE NODE CONFIG
complete -C /Users/andrew/stripe/space-commander/bin/commands/sc-complete sc
complete -C /Users/andrew/stripe/space-commander/bin/commands/sc-complete _sc

launchctl setenv LC_ALL $LANG
